% \iffalse meta-comment
%
% Copyright (C) 2019--2021--2020 by Philipp Tempel <latex@philipptempel.me>
% -------------------------------------------------------
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{philipptempel-math.dtx}
%</driver>
%<pre-package>\NeedsTeXFormat{LaTeX2e}[2005/12/01]%
%<pre-package>\ProvidesPackage{philipptempel-math}[%
%<package>Philipp Tempel Math]%
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{hyperref}
\usepackage{philipptempel-math}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{philipptempel-math.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2021/01/22}{Initial version}
%
% \GetFileInfo{philipptempel-math.dtx}
%
% \DoNotIndex{%
%   \!,%
%   \,,%
%   \:,%
%   \adj,%
%   \arg,%
%   \ast,%
%   \bm,%
%   \bullet,%
%   \cdot,%
%   \cr,%
%   \currname,%
%   \currval,%
%   \ddot,%
%   \DeclareMathOperator,%
%   \DeclarePairedDelimiterX,%
%   \def,%
%   \Delta,%
%   \delta,%
%   \dfrac,%
%   \dot,%
%   \dots,%
%   \dotsc,%
%   \else,%
%   \expandafter,%
%   \epsilon,%
%   \fi,%
%   \frac,%
%   \hat,%
%   \ifblank,%
%   \IfBooleanTF,%
%   \ifdefined,%
%   \ifphilipptempel@math@bold,%
%   \IfValueT,%
%   \IfValueTF,%
%   \ifx,%
%   \infty,%
%   \interval,%
%   \langle,%
%   \lbrace,%
%   \lceil,%
%   \left,%
%   \let,%
%   \lfloor,%
%   \lparen,%
%   \lVert,%
%   \lvert,%
%   \mathbb,%
%   \mathcal,%
%   \mathds,%
%   \mathinner,%
%   \mathop,%
%   \mathrm,%
%   \mathsf,%
%   \mbox,%
%   \min,%
%   \mkern,%
%   \nabla,%
%   \newcommand,%
%   \newif,%
%   \nl,%
%   \numlist,%
%   \ooalign,%
%   \operatorname,%
%   \otimes,%
%   \outerp@inner,%
%   \overline,%
%   \partial,%
%   \PassOptionsToPackage,%
%   \pgfkeys,%
%   \pgfkeyscurrentname,%
%   \pgfkeyscurrentvalue,%
%   \pgfkeysnovalue,%
%   \phantom,%
%   \philipptempel@math@boldfalse,%
%   \philipptempel@math@boldtrue,%
%   \philipptempel@math@setdefaults,%
%   \prescript,%
%   \prime,%
%   \ProcessList,%
%   \ProcessPgfPackageOptions,%
%   \ProvideDocumentCommand,%
%   \ProvideMathOperator,%
%   \rangle,%
%   \rbrace,%
%   \rceil,%
%   \renewcommand,%
%   \RequirePackage,%
%   \rfloor,%
%   \right,%
%   \rparen,%
%   \rule,%
%   \runner,%
%   \rVert,%
%   \rvert,%
%   \SavedStyle,%
%   \SI,%
%   \si,%
%   \SIlist,%
%   \SIrange,%
%   \smaller,%
%   \SplitList,%
%   \text,%
%   \textscale,%
%   \tfrac,%
%   \Theta,%
%   \ThisStyle,%
%   \times,%
%   \top,%
%   \varepsilon,%
%   \vectsetitem,%
%   \vectsetitema,%
% }
% \expandafter\DoNotIndex\expandafter{\string\{}
% \expandafter\DoNotIndex\expandafter{\string\}}
%
%
% \title{The \textsf{philipptempel-math} package\thanks{This document
%   corresponds to \textsf{philipptempel-math}~\fileversion, dated \filedate.}}
% \author{Philipp Tempel \\ \texttt{latex@philipptempel.me}}
%
% \maketitle
%
% \section{Introduction}
%
% \section{Usage}
%
% \StopEventually{}
%
%
% \section{Implementation}
%<*package>
%
% \subsection{Package Dependencies}
%
% The package is a toolbox of programming facilities geared primarily towards
% LaTeX class and package authors. It provides LaTeX frontends to some of the
% new primitives provided by e-TeX as well as some generic tools which are not
% strictly related to e-TeX but match the profile of this package. Note that the
% initial versions of this package were released under the name elatex. The
% package provides functions that seem to offer alternative ways of implementing
% some LaTeX kernel commands; nevertheless, the package will not modify any part
% of the LaTeX kernel.
%    \begin{macrocode}
\RequirePackage{etoolbox}
%    \end{macrocode}
%
% xparse – A generic document command parser
% The package provides a high-level interface for producing document-level
% commands. In that way, it offers a replacement for LaTeX2e’s |\newcommand|
% macro, with significantly improved functionality.
% The package is distributed as part of the l3packages bundle.
%    \begin{macrocode}
\RequirePackage{xparse}
%    \end{macrocode}
%
% The pgfkeys package (part of the pgf distribution) is a well-designed way of
% defining and using large numbers of keys for key-value syntaxes. However,
% pgfkeys itself does not offer means of handling LaTeX class and package
% options. This package adds such option handling to pgfkeys, in the same way
% that kvoptions adds the same facility to the LaTeX standard keyval package.
%    \begin{macrocode}
\RequirePackage{pgfkeys}
\RequirePackage{pgfopts}
%    \end{macrocode}
%
% Set the font size relative to the current font size. The basic command of the
% package is |\relsize|, whose argument is a number of |\magsteps| to change
% size; from this are defined commands |\larger|, |\smaller|, |\textlarger|,
% etc.
%    \begin{macrocode}
\RequirePackage{relsize}
%    \end{macrocode}
%
% scalerel – Constrained scaling and stretching of objects\\
% The package provides four commands for vertically scaling and stretching
% objects. Its primary function is the ability to scale/stretch and shift one
% object to conform to the size of a specified second object. This feature can
% be useful in both equations and schematic diagrams.\\
% Additionally, the scaling and stretching commands offer constraints on maximum
% width and/or minimum aspect ratio, which are often used to preserve legibility
% or for the sake of general appearance.
%    \begin{macrocode}
\RequirePackage{scalerel}
%    \end{macrocode}
%
% Mathtools provides a series of packages designed to enhance the appearance of
% documents containing a lot of mathematics. The main backbone is amsmath, so
% those unfamiliar with this required part of the LaTeX system will probably not
% find the packages very useful. Mathtools provides many useful tools for
% mathematical typesetting. It is based on amsmath and fixes various
% deficiencies of amsmath and standard LaTeX. It provides:
% * Extensible symbols, such as brackets, arrows, harpoons, etc.;
% * Various symbols such as |\coloneqq| (:=);
% * Easy creation of new tag forms;
% * Showing equation numbers only for referenced equations;
% * Extensible arrows, harpoons and hookarrows;
% * Starred versions of the amsmath matrix environments for specifying the
%   column alignment;
% * More building blocks: multlined, cases-like environments, new gathered
%   environments;
% * Maths versions of |\makebox|, |\llap|, |\rlap| etc.;
% * Cramped math styles; and more...
%    \begin{macrocode}
% \RequirePackage{mathtools}
%    \end{macrocode}
%
% amsmath – AMS mathematical facilities for LaTeX
% The principal package in the AMS-LaTeX distribution. It adapts for use in
% LaTeX most of the mathematical features found in AMS-TeX; it is highly
% recommended as an adjunct to serious mathematical typesetting in LaTeX.
% When amsmath is loaded, AMS-LaTeX packages amsbsy (for bold symbols), amsopn
% (for operator names) and amstext (for text embedded in mathematics) are also
% loaded.
% amsmath is part of the LaTeX required distribution; however, several
% contributed packages add still further to its appeal; examples are empheq,
% which provides functions for decorating and highlighting mathematics, and
% ntheorem, for specifying theorem (and similar) definitions.
%    \begin{macrocode}
\RequirePackage{amsmath}
%    \end{macrocode}
%
% amsfonts – TEX fonts from the American Mathematical Society
% An extended set of fonts for use in mathematics, including: extra mathematical
% symbols; blackboard bold letters (uppercase only); fraktur letters; subscript
% sizes of bold math italic and bold Greek letters; subscript sizes of large
% symbols such as sum and product; added sizes of the Computer Modern small caps
% font; cyrillic fonts (from the University of Washington); Euler mathematical
% fonts. All fonts are provided as Adobe Type 1 files, and all except the Euler
% fonts are provided as METAFONT source.
% The distribution also includes the canonical Type 1 versions of the Computer
% Modern family of fonts.
% Basic LATEX support for the symbol fonts is provided by amsfonts.sty, with
% names of individual symbols defined in amssymb.sty. The Euler fonts are
% supported by separate packages; details can be found in the documentation.
%    \begin{macrocode}
\RequirePackage{amsfonts}
%    \end{macrocode}
%
% doublestroke – Typeset mathematical double stroke symbols
% A font based on Computer Modern Roman useful for typesetting the mathematical
% symbols for the natural numbers (N), whole numbers (Z), rational numbers (Q),
% real numbers (R) and complex numbers (C); coverage includes all Roman capital
% letters, ‘1’, ‘h’ and ‘k’. The font is available both as METAFONT source and
% in Adobe Type 1 format, and LaTeX macros for its use are provided.
% The fonts appear in the blackboard bold sampler.
% For a full list of additional math symbols, see
% \url{http://milde.users.sourceforge.net/LUCR/Math/mathpackages/dsfont-symbols.pdf}
%    \begin{macrocode}
\RequirePackage{dsfont}
%    \end{macrocode}
%
% The bm package defines a command |\bm| which makes its argument bold. The
% argument may be any maths object from a single symbol to an expression. This
% is closely related to the specification of the |\boldsymbol| command in
% AMS-LaTeX, but |\bm| is rather more careful in the way it does things.
%    \begin{macrocode}
\RequirePackage{bm}
%    \end{macrocode}
%
% A comprehensive (SI) units package. Typesetting values with units requires
% care to ensure that the combined mathematical meaning of the value plus unit
% combination is clear. In particular, the SI units system lays down a
% consistent set of units with rules on how they are to be used. However,
% different countries and publishers have differing conventions on the exact
% appearance of numbers (and units). A number of LaTeX packages have been
% developed to provide consistent application of the various rules: SIunits,
% sistyle, unitsdef and units are the leading examples. The numprint package
% provides a large number of number-related functions, while dcolumn and rccol
% provide tools for typesetting tabular numbers. The siunitx package takes the
% best from the existing packages, and adds new features and a consistent
% interface. A number of new ideas have been incorporated, to fill gaps in the
% existing provision. The package also provides backward-compatibility with
% SIunits, sistyle, unitsdef and units. The aim is to have one package to handle
% all of the possible unit-related needs of LaTeX users. The package relies on
% LaTeX 3 support from the l3kernel and l3packages bundles.
%    \begin{macrocode}
\PassOptionsToPackage{%
% General styling
    multi-part-units=brackets,%
    zero-decimal-to-integer=false,%
    add-decimal-zero=false,%
%     add-integer-zero=true,%
    per-mode=reciprocal,%
% Rounding
    % round-mode=none,%
    round-precision=3,%
    round-half=even,%
% Products |\SI{1x2x3}|
    product-units=power,%
% Ranges |\SIrange|
    range-units=brackets,%
% Lists |\SIlist|
    list-units=brackets,%
  }{siunitx}
% \@ifpackagelater{<package>}{2021/06/13}{% SIunitX newer than 3.0.0
% %   \PassOptionsToPackage{%
% %   }{siunitx}%
% }{% Older versions of SIunitX still have some options
%   \PassOptionsToPackage{%
% % Tables
%     table-unit-alignment=left,%
%   }{siunitx}%
% }%
\RequirePackage{siunitx}
%    \end{macrocode}
%
% The dcolumn package makes use of the array package to define a "D" column
% format for use in tabular environments. This package is part of the tools
% bundle in the LaTeX required distribution.
%    \begin{macrocode}
\RequirePackage{dcolumn}
%    \end{macrocode}
%
% Typeset in-line fractions in a "nice" way. The package typesets fractions
% "nicely" - in the form 'a/b' (i.e., staggered with a slash between them,
% rather than directly one over the other). The package is distributed as part
% of a bundle including the units package. Nicefrac's facilities are provided,
% in a cleaner way, by the (experimental) xfrac package, but see also the faktor
% package for quotient spaces and the like.
%    \begin{macrocode}
\RequirePackage{nicefrac}
%    \end{macrocode}
%
% fouridx - Left supscript- and superscripts in maths mode The package enables left
% subscripts and superscripts in maths mode. The supscript- and superscripts are
% raised for optimum fitting to the symbol indexed, in such a way that left
% and right supscript- and superscripts are set on the same level, as appropriate.
% The package provides an alternative to the use of the |\sideset| command in
% the amsmath package.
%    \begin{macrocode}
\RequirePackage{fouridx}
%    \end{macrocode}
%
% Place lines through maths formulae. A package to draw diagonal lines
% ("cancelling" a term) and arrows with limits (cancelling a term "to a value")
% through parts of maths formulae.
%    \begin{macrocode}
\RequirePackage{cancel}
%    \end{macrocode}
%
% EMPHasizing EQuations. The empheq package is part of the mathtools bundle. The
% package provides a visual markup extension to amsmath. The user-friendly
% interface allows the user to put a set of equations inside a box thus
% enhancing the |\boxed| feature of amsmath. As a side effect it's also possible
% to add material on both sides of the equations thus providing (and surpassing)
% the functionality of the cases package. Users of ntheorem will probably want
% to have a look at it as well, since the problem with end-of-theorem marks in
% gather and other environments can be circumvented using empheq.
%    \begin{macrocode}
\RequirePackage{empheq}
%    \end{macrocode}
%
% Provides macros to typeset bra-ket notation, as well as set specifiers, with a
% single bar, a double bar, or vertical bar specifier in between two bracketed
% parts. Each macro comes in a fixed-size version and an expanding version. If
% the package finds itself operating under e-tex, it uses the extended primitive
% |\middle| for more reliable results
%    \begin{macrocode}
\RequirePackage{braket}
%    \end{macrocode}
%
%  When typing an open interval as $]a,b[$, a closing bracket is being used in
%  place of an opening fence and vice versa. This leads to the wrong spacing in,
%  say, $]-a,b[$ or $A \in ]a,b[ = B$. The package attempts to solve this using
%
%  |\interval{a}{b}| yields $\interval{a}{b}$
%
%  |\interval[open]{a}{b}| yields $\interval[open]{a}{b}$
%
%  |\interval[open left]{a}{b}| yields $\interval[open left]{a}{b}$
%
% The package also supports fence scaling and ensures that the enclosing fences
% will end up having the proper closing and opening types. TeX maths does not do
% this job properly.
%    \begin{macrocode}
\RequirePackage{interval}
%    \end{macrocode}
%
%
% \subsection{Package Options}
%
% Configure the \marg{pgfopts}-package
%    \begin{macrocode}
\pgfkeys{%
  /philipptempel/math/.is family,%
  /philipptempel/math/.cd,%
}%
%    \end{macrocode}
%
% By default, all undefined options will be passed as options to the |glossaries-extra| package only the options defined here are for the actual package.
%    \begin{macrocode}
\newif\ifphilipptempel@math@bold
\philipptempel@math@boldtrue
\pgfkeys{
  /philipptempel/math/bold/.cd,%
    .is choice,%
    true/.code={\philipptempel@math@boldtrue},%
    false/.code={\philipptempel@math@boldfalse},%
}%
%    \end{macrocode}
%
% And now a callback for unknown options to be passed down to the |glossaries-extra| class
%    \begin{macrocode}
\pgfkeys{%
  /philipptempel/math/.cd,%
    .unknown/.code={%
      \let\currname\pgfkeyscurrentname%
      \let\currval\pgfkeyscurrentvalue%
      \ifx#1\pgfkeysnovalue%
        \PassOptionsToPackage{\currname}{glossaries-extra}%
      \else%
        \PassOptionsToPackage{\expandafter\currname\expandafter=\currval}{glossaries-extra}%
      \fi%
    },%
}%
%    \end{macrocode}
%
% Setting default values for options
%    \begin{macrocode}
\newcommand{\philipptempel@math@setdefaults}{%
  \pgfkeys{/philipptempel/math/.cd,%
    bold=true,%
  }%
}%
%    \end{macrocode}
%
% Process options passed to the class
%    \begin{macrocode}
\philipptempel@math@setdefaults
\ProcessPgfPackageOptions{/philipptempel/math}
\ifphilipptempel@math@bold%
  \let\philipptempel@bm\bm%
\else%
  \let\philipptempel@bm\empty%
\fi
%    \end{macrocode}
%
%
% \section{Macros}
%
%
% \begin{macro}{\ProvideMathOperator}
% \cmd{\ProvideMathOperator}\marg{opname}\marg{text}.\\
% \cmd{\ProvideMathOperator}*\marg{opname}\marg{text}.\\
% Maybe not the cleanest way, but we shall also provide a |\ProvideMathOperator| macro that allows to define math operators in a fail-safe way i.e., work like |\providecommand|. The starred version uses |\DeclareMathOperator*| instead of the unstarred version. This puts the limits underneath the operator.
%    \begin{macrocode}
\ProvideDocumentCommand{\ProvideMathOperator}{ s m m }{%
  \ifdefined#2\else%
    \IfBooleanTF{#1}{%
      \DeclareMathOperator*{#2}{#3}%
    }{%
      \DeclareMathOperator{#2}{#3}%
    }%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\parentheses}
% \cmd{\parentheses}\marg{content} wraps its \marg{content} into regular parentheses. See the |mathtools| package for implementation details.\\
% \cmd{\parentheses}\marg{} renders $\parentheses{}$.\\
% \cmd{\parentheses}\marg{a b} renders $\parentheses{a b}$.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\parentheses}[1]{\lparen}{\rparen}{%
  \ifblank{#1}{\cdot}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\cparentheses}
% \cmd{\cparentheses}\marg{content} wraps its \marg{content} into curly parentheses. See the |mathtools| package for implementation details.\\
% \cmd{\cparentheses}\marg{} renders $\cparentheses{}$.\\
% \cmd{\cparentheses}\marg{a b} renders $\cparentheses{a b}$.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\cparentheses}[1]{\lbrace}{\rbrace}{%
  \ifblank{#1}{\cdot}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\aparentheses}
% \cmd{\aparentheses}\marg{content} wraps its \marg{content} into angled parentheses. See the |mathtools| package for implementation details.\\
% \cmd{\aparentheses}\marg{} renders $\aparentheses{}$.\\
% \cmd{\aparentheses}\marg{a b} renders $\aparentheses{a b}$.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\aparentheses}[1]{\langle}{\rangle}{%
  \ifblank{#1}{\cdot}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sparentheses}
% \cmd{\sparentheses}\marg{content} wraps its \marg{content} into square parentheses. See the |mathtools| package for implementation details.\\
% \cmd{\sparentheses}\marg{} renders $\sparentheses{}$.\\
% \cmd{\sparentheses}\marg{a b} renders $\sparentheses{a b }$.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\sparentheses}[1]{\lbrack}{\rbrack}{%
  \ifblank{#1}{\cdot}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ceil}
% \cmd{\ceil}\marg{value} writes math operator for ceiling \marg{value}. See the |mathtools| package for implementation details.\\
% \cmd{\ceil}\marg{a} renders $\ceil{a}$.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\ceil}[1]{\lceil}{\rceil}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\floor}
% \cmd{\floor}\marg{value} writes math operator for flooring \marg{value}. See the |mathtools| package for implementation details.\\
% \cmd{\floor}\marg{a} renders $\floor{a}$.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\floor}[1]{\lfloor}{\rfloor}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\lerp}
% \cmd{\lerp}\marg{start}\marg{end} writes linear interpolation of two functions \marg{start} and \marg{end}.\\
% \cmd{\lerp}\oarg{var}\marg{start}\marg{end} uses running variable \oarg{var}.\\
% \cmd{\lerp}\marg{a}\marg{b} renders $\lerp{a}{b}$.\\
% \cmd{\lerp}\oarg{s}\marg{a}\marg{b} renders $\lerp[s]{a}{b}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\lerp}{ O{t} m m }{%
  \parentheses*{%
    1%
    -%
    #1%
  } \,%
  #2%
  +%
  #1 \,%
  #3%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\of}
% \cmd{\of}\marg{arguments} writes the ``function of ...'' argument with conventional parentheses.\\
% \cmd{\of}\oarg{parens size}\marg{arguments} sets the parentheses size to \oarg{parens size} e.g., |\bigg|.\\
% \cmd{\of}*\marg{arguments} auto-scales the size of the braces.\\
% \cmd{\of}\marg{\textbackslash frac \{a\}\{b\}} renders $\of{\frac{a}{b}}$.\\
% \cmd{\of}*\marg{\textbackslash frac \{a\}\{b\}} renders $\of*{\frac{a}{b}}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\of}{ s o m }{%
  \mkern-0.50mu%
  \ifblank{#3}{%
    \def\innerp{\cdot}%
  }{%
    \def\innerp{\mkern-0.50mu#3\mkern-0.50mu}%
  }%
  \IfBooleanTF{#1}{%
    \IfValueTF{#2}{%
      \parentheses*[#2]{\innerp}%
    }{%
      \parentheses*{\innerp}%
    }%
  }{%
    \IfValueTF{#2}{%
      \parentheses[#2]{\innerp}%
    }{%
      \parentheses{\innerp}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\cof}
% \cmd{\cof}\marg{arguments} writes the ``function of ...'' argument with curly parentheses.\\
% \cmd{\cof}\oarg{parens size}\marg{arguments} sets the parentheses size to \marg{parens size} e.g., |\bigg|.\\
% \cmd{\cof}*\marg{arguments} auto-scales the size of the braces.\\
% \cmd{\cof}\marg{\textbackslash frac \{a\}\{b\}} renders $\cof{\frac{a}{b}}$.\\
% \cmd{\cof}*\marg{\textbackslash frac \{a\}\{b\}} renders $\cof*{\frac{a}{b}}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\cof}{ s o m }{%
  \mkern-1.0mu%
  \IfBooleanTF{#1}{%
    \IfValueTF{#2}{%
      \cparentheses*[#2]{#3}%
    }{%
      \cparentheses*{#3}%
    }%
  }{%
    \IfValueTF{#2}{%
      \cparentheses[#2]{#3}%
    }{%
      \cparentheses{#3}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sof}
% \cmd{\sof}\marg{arguments} writes the ``function of ...'' argument with square parentheses.\\
% \cmd{\sof}\oarg{parens size}\marg{arguments} sets the parentheses size to \marg{parens size} e.g., |\bigg|.\\
% \cmd{\sof}*\marg{arguments} auto-scales the size of the braces.\\
% \cmd{\sof}\marg{\textbackslash frac \{a\}\{b\}} renders $\sof{\frac{a}{b}}$.\\
% \cmd{\sof}*\marg{\textbackslash frac \{a\}\{b\}} renders $\sof*{\frac{a}{b}}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\sof}{ s o m }{%
  \mkern-1.0mu%
  \IfBooleanTF{#1}{%
    \IfValueTF{#2}{%
      \sparentheses*[#2]{#3}%
    }{%
      \sparentheses*{#3}%
    }%
  }{%
    \IfValueTF{#2}{%
      \sparentheses[#2]{#3}%
    }{%
      \sparentheses{#3}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\aof}
% \cmd{\aof}\marg{arguments} writes the ``function of ...'' argument with angled parentheses.\\
% \cmd{\aof}\oarg{parens size}\marg{arguments} sets the parentheses size to \marg{parens size} e.g., |\bigg|.\\
% \cmd{\aof}*\marg{arguments} auto-scales the size of the braces.\\
% \cmd{\aof}\marg{\textbackslash frac \{a\}\{b\}} renders $\aof{\frac{a}{b}}$.\\
% \cmd{\aof}*\marg{\textbackslash frac \{a\}\{b\}} renders $\aof*{\frac{a}{b}}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\aof}{ s o m }{%
  \mkern-1.0mu%
  \IfBooleanTF{#1}{%
    \IfValueTF{#2}{%
      \aparentheses*[#2]{#3}%
    }{%
      \aparentheses*{#3}%
    }%
  }{%
    \IfValueTF{#2}{%
      \aparentheses[#2]{#3}%
    }{%
      \aparentheses{#3}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\overlinebm}
% \cmd{\overlinebm}\marg{var} writes an overlined bold font variable.\\
% \cmd{\overlinebm}\marg{M} renders~$\overlinebm{M}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\overlinebm}{ m }{%
  \ThisStyle{\ooalign{%
    $\SavedStyle\mkern2.5mu\overline{\phantom{\mathrm{#1}}}$\cr$\SavedStyle\bm{{#1}}$%
  }}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\overlinevect}
% \cmd{\overlinevect}\marg{content} writes an overlined bold font vector.\\
% \cmd{\overlinevect}\marg{v} renders~$\overlinevect{v}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\overlinevect}{ m }{%
  \overlinebm{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\overlinematr}
% \cmd{\overlinematr}\marg{content} writes an overlined bold font matrix.\\
% \cmd{\overlinematr}\marg{M} renders~$\overlinematr{M}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\overlinematr}{ m }{%
  \overlinebm{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vect}
% \cmd{\vect}\marg{var} writes the vector representation of \marg{var} which defaults to |\bm{var}|.\\
% \cmd{\vect}\oarg{sup}\marg{var} prepends superscript \oarg{sup} to the vector.\\
% \cmd{\vect}\oarg{sup}\oarg{sub}\marg{var} also prepends subscript \oarg{sub} to the vector.\\
% \cmd{\vect}\marg{v} renders~$\vect{v}$.\\
% \cmd{\vect}\oarg{sup}\marg{v} renders~$\vect[sup]{v}$.\\
% \cmd{\vect}\oarg{sup}\oarg{sub}\marg{v} renders~$\vect[sup][sub]{v}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\vect}{ O{} O{} m }{%
  \prescript{#1}{#2}{\philipptempel@bm{#3}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotvect} 
% \cmd{\dotvect}\marg{var} writes a proper single-dotted vector with the dot not written bold, only the vector component written as |\vect{var}|.\\
% \cmd{\dotvect}\oarg{sup}\marg{var} see |\vect[sup]{var}|.\\
% \cmd{\dotvect}\oarg{sup}\oarg{sub}\marg{var} see |\vect[sup][sub]{var}|.\\
% \cmd{\dotvect}\marg{v} renders~$\dotvect{v}$.\\
% \cmd{\dotvect}\oarg{sup}\marg{v} renders~$\dotvect[sup]{v}$.\\
% \cmd{\dotvect}\oarg{sup}\oarg{sub}\marg{v} renders~$\dotvect[sup][sub]{v}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\dotvect}{ O{} O{} m }{%
  \prescript{#1}{#2}{\dot{\vect{#3}}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotvect}
% \cmd{\ddotvect}\marg{var} writes a proper double-dotted vector with the dot not written bold, only the vector component written as |\vect{var}|.\\
% \cmd{\ddotvect}\oarg{sup}\marg{var} see |\vect[sup]{var}|.\\
% \cmd{\ddotvect}\oarg{sup}\oarg{sub}\marg{var} see |\vect[sup][sub]{var}|.\\
% \cmd{\ddotvect}\marg{v} renders~$\ddotvect{v}$.\\
% \cmd{\ddotvect}\oarg{sup}\marg{v} renders~$\ddotvect[sup]{v}$.\\
% \cmd{\ddotvect}\oarg{sup}\oarg{sub}\marg{v} renders~$\ddotvect[sup][sub]{v}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotvect}{ O{} O{} m }{%
  \prescript{#1}{#2}{\ddot{\vect{#3}}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ndotvect}
% \cmd{\ndotvect}\marg{num}\marg{vect} \marg{num}-th time-derivative of vector \marg{vect}.\\
% \cmd{\ndotvect}\oarg{sup}\marg{num}\marg{vect} prepends superscript \oarg{sup}.\\
% \cmd{\ndotvect}\oarg{sup}\oarg{sub}\marg{num}\marg{vect} also prepends superscript \oarg{sub}.\\
% \cmd{\ndotvect}\marg{n}\marg{v} renders~$\ndotvect{n}{v}$.\\
% \cmd{\ndotvect}\oarg{sup}\marg{n}\marg{v} renders~$\ndotvect[sup]{n}{v}$.\\
% \cmd{\ndotvect}\oarg{sup}\oarg{sub}\marg{n}\marg{v} renders~$\ndotvect[sup][sub]{n}{v}$.
%    \begin{macrocode}
\ProvideDocumentCommand{\ndotvect}{ O{} O{} m m }{%
  \prescript{#1}{#2}{\ndot{#3}{\vect{#4}}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ndot}
% \cmd{\ndot}\marg{num}\marg{var} writes the \marg{num}-th derivative of \marg{var}.\\
% \cmd{\ndot}*\marg{num}\marg{var} auto-scales the parentheses.
%    \begin{macrocode}
\ProvideDocumentCommand{\ndot}{ s m m }{%
  {#3}^{%
    \scriptscriptstyle%
    \IfBooleanTF{#1}{%
      \parentheses*{#2}%
    }{%
      \parentheses{#2}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pr}
% \cmd{\pr}\marg{var} writes the first prime-derivative of \marg{var}.
%    \begin{macrocode}
\ProvideDocumentCommand{\pr}{ m }{%
  #1^{\prime}%\mkern-1.2mu%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ppr}
% \cmd{\ppr}\marg{var} writes the second prime-derivative of \marg{var}.
%    \begin{macrocode}
\ProvideDocumentCommand{\ppr}{ m }{%
  #1^{\prime\prime}\mkern-1.2mu%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pppr}
% \cmd{\pppr}\marg{var} writes the third prime-derivative of \marg{var}.
%    \begin{macrocode}
\ProvideDocumentCommand{\pppr}{ m }{%
  #1^{\prime\prime\prime}\mkern-1.2mu%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\npr}
% \cmd{\npr}\marg{var} writes the $n$-th prime derivative of \marg{var}.\\
% \cmd{\npr}\oarg{k}\marg{var} writes the $k$-th prime-derivative of \marg{var}.\\
% \cmd{\npr}*\oarg{n}\marg{var} auto scale parentheses around \oarg{n}.
%    \begin{macrocode}
\ProvideDocumentCommand{\npr}{ s O{n} m }{%
  #3^{%
    \IfBooleanTF{#1}{%
      \parentheses*{#2}%
    }{%
      \parentheses{#2}%
    }%
  }%
  \mkern-1.2mu%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\jacobian}
% \cmd{\jacobian}\marg{var} applies the Jacobian operator to argument \marg{var}.\\
% \cmd{\jacobian}\oarg{sup}\marg{var} prepends superscript \oarg{sup} to the Jacobian operator.\\
% \cmd{\jacobian}\oarg{sup}\oarg{sub}\marg{var} also prepends subscript \oarg{sub} to the Jacobian operator.\\
% \cmd{\jacobian}*\oarg{sup}\oarg{sub}\marg{var} adds and auto-scales parentheses \marg{var}.
%    \begin{macrocode}
\ProvideDocumentCommand{\jacobian}{ s o O{} m }{%
  \jacobiansymbol%
  \IfValueTF{#2}{%
    _{\mkern-2.0mu\smaller[1] #2}^{\mkern-2.0mu\smaller[1] #3}%
    \mkern-4.0mu
  }{%
    \mkern-5.0mu
  }%
  \IfBooleanTF{#1}{%
    \parentheses*{#4}%
  }{%
    #4%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotjacobian}
% \cmd{\dotjacobian}\marg{var} first time-derivative of the jacobian of \marg{var}.
%    \begin{macrocode}
\ProvideDocumentCommand{\dotjacobian}{ m }{%
  \dot{\jacobiansymbol}\mkern-1.0mu#1%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotjacobian}
% \cmd{\ddotjacobian}\marg{var} second time-derivative of the jacobian of \marg{var}.
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotjacobian}{ m }{%
  \ddot{\jacobiansymbol}\mkern-1.0mu#1%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\eye}
% \cmd{\eye} unit-matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\eye}{ }{%
  \mathbb{I}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\zeros}
% \cmd{\zeros} zero-matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\zeros}{ }{%
  \mathds{O}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ones}
% \cmd{\ones} ones-matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\ones}{ o }{%
  \IfValueTF{#1}{%
    \mathbb{1}_{#1}%
  }{%
    \mathbb{1}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\matr}
% \cmd{\matr}\marg{matrix} writes \marg{matrix} formatted as matrix.\\
% \cmd{\matr}\oarg{sup}\marg{matrix} prepends superscript \oarg{sup}.\\
% \cmd{\matr}\oarg{sup}\oarg{sub}\marg{matrix} also prepends subscript oarg{sub}.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\matr}{ O{} O{} m }{%
  \prescript{#1}{#2}{\philipptempel@bm{#3}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotmatr}
% \cmd{\dotmatr}\marg{matrix} writes \marg{matrix} formatted as matrix with its first time-derivative indiciator.\\
% \cmd{\dotmatr}\oarg{sup}\marg{matrix} prepends superscript \oarg{sup}.\\
% \cmd{\dotmatr}\oarg{sup}\oarg{sub}\marg{matrix} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\dotmatr}{ O{} O{} m }{%
  \prescript{#1}{#2}{\dot{\matr{#3}}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotmatr}
% \cmd{\ddotmatr}\marg{matrix} writes \marg{matrix} formatted as matrix with its second time-derivative indiciator.\\
% \cmd{\ddotmatr}\oarg{sup}\marg{matrix} prepends superscript \oarg{sup}.\\
% \cmd{\ddotmatr}\oarg{sup}\oarg{sub}\marg{matrix} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotmatr}{O{} O{} m }{%
  \prescript{#1}{#2}{\ddot{\matr{#3}}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ndotmatr}
% \cmd{\ddotmatr}\marg{num}\marg{matrix} writes \marg{matrix} formatted as matrix with its \marg{num}-th time-derivative indiciator.\\
% \cmd{\ddotmatr}\oarg{sup}\marg{num}\marg{matrix} prepends superscript \oarg{sup}.\\
% \cmd{\ddotmatr}\oarg{sup}\oarg{sub}\marg{num}\marg{matrix} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\ndotmatr}{ O{} O{} m m }{%
  \prescript{#1}{#2}{\ndot{#3}{\matr{#4}}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\abs}
% \cmd{\abs}{value} wraps \marg{value} in absolute-value bars.
%    \begin{macrocode}
\ifdefined\abs\else%
\DeclarePairedDelimiterX{\abs}[1]{\lvert}{\rvert}{%
  \ifblank{#1}{\:\cdot\:}{#1}
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\norm}
% \cmd{\norm}{value} wraps \marg{value} inside of vector norm bars.
%    \begin{macrocode}
\ifdefined\norm\else%
\DeclarePairedDelimiterX{\norm}[1]{\lVert}{\rVert}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pnorm}
% \cmd{\pnorm}{value} wraps \marg{value} inside of vector $p$-norm bars.
%    \begin{macrocode}
\ifdefined\pnorm\else%
\DeclarePairedDelimiterX{\pnorm}[1]{\lVert}{\rVert_{p}}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\twonorm}
% \cmd{\twonorm}{value} wraps \marg{value} inside of vector $2$-norm bars.
%    \begin{macrocode}
\ifdefined\twonorm\else%
\DeclarePairedDelimiterX{\twonorm}[1]{\lVert}{\rVert_{2}}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\onenorm}
% \cmd{\onenorm}{value} wraps \marg{value} inside of vector $1$-norm bars.
%    \begin{macrocode}
\ifdefined\onenorm\else%
\DeclarePairedDelimiterX{\onenorm}[1]{\lVert}{\rVert_{1}}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\maxnorm}
% \cmd{\maxnorm}{value} wraps \marg{value} inside of vector $\infty$-norm bars.
%    \begin{macrocode}
\ifdefined\maxnorm\else%
\DeclarePairedDelimiterX{\maxnorm}[1]{\lVert}{\rVert_{\infty}}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pow}
% \cmd{\pow}\marg{base} simple wrapper for $\langle base \rangle^{2}$.\\
% \cmd{\pow}*\marg{base} applies and auto-scales parentheses around \marg{base}.\\
% \cmd{\pow}\oarg{power}\marg{base} uses \marg{power} as exponent instead of the default $2$.
%    \begin{macrocode}
\ProvideDocumentCommand{\pow}{ s O{2} m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#3
    }^{#2}%
  }{%
    #3^{#2}%
  }
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\skewm}
% \cmd{\skewm}\marg{value} provides a paired delimiter for the skew-symmetric matrix of \marg{value}.
%    \begin{macrocode}
\ifdefined\skewm\else%
  \DeclarePairedDelimiterX{\skewm}[1]{[}{]_{\mkern-2.5mu\times}}{#1}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotp}
% \cmd{\dotp}\marg{left}\marg{right} dot-product of two values \marg{left} and \marg{right}.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\dotp}[2]{\langle}{\rangle}{%
  #1, #2%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\innerp}
% \cmd{\innerp}\marg{left}\marg{right} inner-product of two values \marg{left} and \marg{right}.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\innerp}[2]{\langle}{\rangle}{%
  #1, #2%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\crossp}
% \cmd{\crossp}\marg{left}\marg{right} cross-product of two values \marg{left} and \marg{right}.
%    \begin{macrocode}
\ProvideDocumentCommand{\crossp}{ m m }{%
  #1 \times #2%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\outerp}
% \cmd{\outerp}\marg{left}\marg{right} outer-product of two values \marg{left} and \marg{right}.
%    \begin{macrocode}
\ProvideDocumentCommand{\outerp}{ m m }{%
  #1 \otimes #2%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dif}
%    \begin{macrocode}
\ProvideDocumentCommand{\dif}{ o }{%
  \operatorname{d}%
  \IfValueT{#1}{%
    _{#1}%
  }%
  \!%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Dif}
%    \begin{macrocode}
\ProvideDocumentCommand{\Dif}{ o }{%
  \operatorname{D}%
  \IfValueT{#1}{%
    _{#1}%
  }%
  \!%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pd}
% \cmd{\pd}\marg{base}\marg{op} writes partial derivative of \marg{base} with respect to \marg{op}.\\
% \cmd{\pd}\oarg{num}\marg{base}\marg{op} optionally displays the partial derivative as the \marg{num}-th derivative.
%    \begin{macrocode}
\ProvideDocumentCommand{\pd}{ O{} m m }{%
  \frac{%
    \partial^{#1} {#2}%
  }{%
    \partial {#3}^{#1}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tpd}
% \cmd{\tpd}\marg{base}\marg{op} writes partial derivative of \marg{base} with respect to \marg{op} in textstyle.\\
% \cmd{\tpd}\oarg{num}\marg{base}\marg{op} optionally displays the partial derivative as the \marg{num}-th derivative.
%    \begin{macrocode}
\ProvideDocumentCommand{\tpd}{ O{} m m }{%
  \mathinner{%
    \tfrac{%
      \partial^{#1} {#2}%
    }{%
      \partial {#3}^{#1}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dpd}
% \cmd{\dpd}\marg{base}\marg{op} writes partial derivative of \marg{base} with respect to \marg{op} in displaystyle.\\
% \cmd{\dpd}\oarg{num}\marg{base}\marg{op} optionally displays the partial derivative as the \marg{num}-th derivative.
%    \begin{macrocode}
\ProvideDocumentCommand{\dpd}{ O{} m m }{%
  \mathinner{%
    \dfrac{%
      \partial^{#1} {#2}%
    }{%
      \partial {#3}^{#1}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\md}
% \cmd{\md}\marg{f}\marg{x}\marg{y}.\\
% \cmd{\md}[3]\marg{f}[2]\marg{x}\marg{y}.\\
% \cmd{\md}[3]\marg{f}\marg{x}[2]\marg{y}.\\
% \cmd{\md}[4]\marg{f}[2]\marg{x}[2]\marg{y}.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\md}{ O{2} m O{} m O{} m }{%
  \frac{%
    \partial^{#1} {#2}%
  }{%
    \partial {#3}^{#4}%
    \partial {#5}^{#6}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tmd}
% \cmd{\tmd}\marg{f}\marg{x}\marg{y}.\\
% \cmd{\tmd}[3]\marg{f}[2]\marg{x}\marg{y}.\\
% \cmd{\tmd}[3]\marg{f}\marg{x}[2]\marg{y}.\\
% \cmd{\tmd}[4]\marg{f}[2]\marg{x}[2]\marg{y}.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\tmd}{ O{2} m O{} m O{} m }{%
  \mathinner{%
    \tfrac{%
      \partial^{#1} {#2}%
    }{%
      \partial {#3}^{#4}%
      \partial {#5}^{#6}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dmd}
% \cmd{\dmd}\marg{f}\marg{x}\marg{y}.\\
% \cmd{\dmd}[3]\marg{f}[2]\marg{x}\marg{y}.\\
% \cmd{\dmd}[3]\marg{f}\marg{x}[2]\marg{y}.\\
% \cmd{\dmd}[4]\marg{f}[2]\marg{x}[2]\marg{y}.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\dmd}{ O{2} m O{} m O{} m }{%
  \mathinner{%
    \dfrac{%
      \partial^{#1} {#2}%
    }{%
      \partial {#3}^{#4}%
      \partial {#5}^{#6}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\od}
% \cmd{\od}\marg{base}\marg{op} writes ordinary derivative of \marg{base} with respect to \marg{op}.\\
% \cmd{\od}\oarg{num}\marg{base}\marg{op} optionally displays the ordinary derivative as the \marg{num}-th derivative.
%    \begin{macrocode}
\ProvideDocumentCommand{\od}{ O{} m m }{%
  \frac{%
    \dif^{#1} {#2}%
  }{%
    \dif {#3}^{#1}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tod}
% \cmd{\od}\marg{base}\marg{op} writes ordinary derivative of \marg{base} with respect to \marg{op} in textstyle.\\
% \cmd{\od}\oarg{num}\marg{base}\marg{op} optionally displays the ordinary derivative as the \marg{num}-th derivative.
%    \begin{macrocode}
\ProvideDocumentCommand{\tod}{ O{} m m }{%
  \mathinner{%
    \tfrac{%
      \dif^{#1} {#2}%
    }{%
      \dif {#3}^{#1}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dod}
% \cmd{\od}\marg{base}\marg{op} writes ordinary derivative of \marg{base} with respect to \marg{op} in displaystyle.\\
% \cmd{\od}\oarg{num}\marg{base}\marg{op} optionally displays the ordinary derivative as the \marg{num}-th derivative.
%    \begin{macrocode}
\ProvideDocumentCommand{\dod}{ O{} m m }{%
  \mathinner{%
    \dfrac{%
      \dif^{#1} {#2}%
    }{%
      \dif {#3}^{#1}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\td}
% \cmd{\td}\marg{op} write total differential of \marg{op}.
%    \begin{macrocode}
\ProvideDocumentCommand{\td}{ m }{%
  \dif{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tol}
% \cmd{\tol} variable that describes a tolerance.
%    \begin{macrocode}
\ProvideDocumentCommand{\tol}{ }{%
  \varepsilon%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\threshold}
% \cmd{\threshold} variable that describes a threshold.
%    \begin{macrocode}
\ProvideDocumentCommand{\threshold}{ }{%
  \epsilon%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\residual}
% \cmd{\residual} vector residual of an algebraic expression or function.\\
% \cmd{\residual}* scalar residual of an algebraic expression or function.
%    \begin{macrocode}
\ProvideDocumentCommand{\residual}{ s }{%
  \IfBooleanTF{#1}{%
    e%
  }{%
    \vect{e}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\stepsize}
%    \begin{macrocode}
\ProvideDocumentCommand{\stepsize}{ }{%
  h%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\funcindex}
%    \begin{macrocode}
\ProvideDocumentCommand{\funcindex}{ }{%
  k%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\loopindex}
%    \begin{macrocode}
\ProvideDocumentCommand{\loopindex}{ }{%
  l%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\iterindex}
%    \begin{macrocode}
\ProvideDocumentCommand{\iterindex}{ }{%
  i%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\itervar}
%    \begin{macrocode}
\ProvideDocumentCommand{\itervar}{ s }{%
  \IfBooleanTF{#1}{%
    x%
  }{%
    \vect{x}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\iterstep}
%    \begin{macrocode}
\ProvideDocumentCommand{\iterstep}{ s }{%
  \Delta%
  \IfBooleanTF{#1}{%
    x%
  }{%
    \vect{x}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\factorial}
%    \begin{macrocode}
\ProvideDocumentCommand{\factorial}{ m }{%
  #1!%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pinv}
% \cmd{\pinv}\marg{base} pseudo-inverse of \marg{base}.\\
% \cmd{\pinv}*\marg{base} add and auto-scale parentheses around \marg{base}.
%    \begin{macrocode}
\ProvideDocumentCommand{\pinv}{ s m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#2}%
  }{%
    #2%
  }%
  ^{+}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\quaternionsymbol}
% \cmd{\quaternionsymbol} quaternion vector.\\
% \cmd{\quaternionsymbol}* quaternion scalar.
%    \begin{macrocode}
\ProvideDocumentCommand{\quaternionsymbol}{ }{%
  q%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\quat}
% \cmd{\quat} quaternion vector.\\
% \cmd{\quat}* quaternion scalar.
%    \begin{macrocode}
\ProvideDocumentCommand{\quat}{ s }{%
  \IfBooleanTF{#1}{%
    \quaternionsymbol%
  }{%
    \vect{\quaternionsymbol}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\quats}
% \cmd{\quats} quaternion scalar part.
%    \begin{macrocode}
\ProvideDocumentCommand{\quats}{ }{%
  \quaternionsymbol_{s}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\quatv}
% \cmd{\quatv} quaternion vector part.
%    \begin{macrocode}
\ProvideDocumentCommand{\quatv}{ }{%
  \vect{\quaternionsymbol}_{v}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotquat}
% \cmd{\dotquat} first time-derivative of quaternion vector.\\
% \cmd{\dotquat}* first time-derivative of quaternion scalar.
%    \begin{macrocode}
\ProvideDocumentCommand{\dotquat}{ s }{%
  \IfBooleanTF{#1}{%
    \dot{\quaternionsymbol}%
  }{%
    \dotvect{\quaternionsymbol}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotquat}
% \cmd{\ddotquat} second time-derivative of quaternion vector.\\
% \cmd{\ddotquat}* second time-derivative of quaternion scalar.
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotquat}{ s }{%
  \IfBooleanTF{#1}{%
    \ddot{\quaternionsymbol}%
  }{%
    \ddotvect{\quaternionsymbol}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\quatratemat}
% \cmd{\quatratemat} quaternion rate matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\quatratemat}{ }{%
  \matr{W}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\coordsys}
% \cmd{\coordsys}\marg{var} typesetter for coordinate system \marg{var}.
%    \begin{macrocode}
\ProvideDocumentCommand{\coordsys}{ m }{%
  \mathcal{K}_{ \ms{#1} }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\transform}
% \cmd{\transform}\marg{from}\marg{to} writes transformation matrix from frame \marg{from} to frame \marg{to}.\\
% \cmd{\transform}\oarg{var}\marg{from}\marg{to} uses \marg{var} as variable for transformation matrix rather than the default $T$.
%    \begin{macrocode}
\ProvideDocumentCommand{\transform}{ O{T} m m }{%
  \matr[#2][#3]{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\discretenabla}
%    \begin{macrocode}
\ProvideDocumentCommand{\discretenabla}{ }{%
  \overline{\nabla}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vectset}
%    \begin{macrocode}
\ProvideDocumentCommand{\vectset}{ >{\SplitList{;}}m }{%
  \langle%
  {\ProcessList{#1}{\vectsetitem}}%
  \rangle%
}%
\newcommand\vectsetitem[1]{#1\let\vectsetitem\vectsetitema}
\newcommand\vectsetitema[1]{; #1}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\kronecker}
%    \begin{macrocode}
\ProvideDocumentCommand{\kronecker}{ O{i} O{j} }{%
  \delta_{#1#2}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dirac}
%    \begin{macrocode}
\ProvideDocumentCommand{\dirac}{ }{%
  \delta%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\const}
%    \begin{macrocode}
\ProvideDocumentCommand{\const}{ }{%
  \text{const}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\msconst}
%    \begin{macrocode}
\ProvideDocumentCommand{\msconst}{ }{%
  \ms{const}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\heaviside}
%    \begin{macrocode}
\ProvideDocumentCommand{\heaviside}{ g }{%
  H%
  \IfValueT{#1}{%
    \of{#1}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\polydeg}
%    \begin{macrocode}
\ProvideDocumentCommand{\polydeg}{ }{%
  d%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Re}
%    \begin{macrocode}
\renewcommand{\Re}{\operatorname{Re}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Im}
%    \begin{macrocode}
\renewcommand{\Im}{\operatorname{Im}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\transposesymbol}
%    \begin{macrocode}
\newcommand{\transposesymbol}{\mbox{\textscale{0.6}{$\top$}}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\transpose}
%    \begin{macrocode}
\ProvideDocumentCommand{\transpose}{ s O{\mkern-1.5mu} m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#3}^{#2\transposesymbol}%
  }{%
    #3^{#2\transposesymbol}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\conjugate}
%    \begin{macrocode}
\ProvideDocumentCommand{\conjugate}{ s m }{%
  \overline{#2}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\hermconjugate}
%    \begin{macrocode}
\ProvideDocumentCommand{\hermconjugate}{ s O{\mkern-1.5mu} m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#3}^{#2\mbox{\textscale{0.6}{$\mathsf{H}$}}}%
  }{%
    {#3}^{#2\mbox{\textscale{0.6}{$\mathsf{H}$}}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\inv}
% \cmd{\inv}\marg{arg} renders $\inv{arg}$
% \cmd\sarg\marg{arg} renders $\inv*{arg}$
%    \begin{macrocode}
\ProvideDocumentCommand{\inv}{ s m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#2}^{-1}%
  }{%
    #2^{-1}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evec}
%    \begin{macrocode}
\ProvideDocumentCommand{\evec}{ s O{e} m }{%
  \IfBooleanTF{#1}{%
    \vect{#2}_{#3}%
  }{%
    \hat{ \vect{#2} }_{#3}%
  }
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecx}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecx}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{ \ms{x} }%
  }{%
    \evec[#2]{ \ms{x} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecX}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecX}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{ \ms{X} }%
  }{%
    \evec[#2]{ \ms{X} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecy}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecy}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{ \ms{y} }%
  }{%
    \evec[#2]{ \ms{y} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecY}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecY}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{ \ms{Y} }%
  }{%
    \evec[#2]{ \ms{Y} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecz}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecz}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{ \ms{z} }%
  }{%
    \evec[#2]{ \ms{z} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecZ}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecZ}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{ \ms{Z} }%
  }{%
    \evec[#2]{ \ms{Z} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arctant}
%    \begin{macrocode}
\ProvideDocumentCommand{\arctant}{ s o m m }{%
  \arctantwo\,%
  \IfBooleanTF{#1}{%
    \of*{#3, #4}%
  }{%
    \of{#3, #4}%
  }
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\irange}
% \cmd{\irange}\oarg{inc}\marg{end} create the number range for \marg{i} from |1| to \marg{end} incrementing by \marg{inc} each step.\\
% \cmd{\irange}\oarg{inc}\marg{end}\marg{runner} use \marg{runner} instead of \marg{i} as the running variable.\\
% \cmd{\irange}*\oarg{inc}\marg{end} uses the starred version of the surrounding parentheses.
%    \begin{macrocode}
\ProvideDocumentCommand{\irange}{s o m g}{%
  \def\runner{\IfValueTF{#4}{#4}{i}}%
  \IfValueTF{#2}{%
    \IfBooleanTF{#1}{%
      {\runner = \parentheses*{1, #2, \dotsc, #3}}%
    }{%
      {\runner = \parentheses{1, #2, \dotsc, #3}}%
    }%
  }{%
    \IfBooleanTF{#1}{%
      {\runner = \parentheses*{1, \dotsc, #3}}%
    }{%
      {\runner = \parentheses{1, \dotsc, #3}}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ms}
%    \begin{macrocode}
\ProvideDocumentCommand{\ms}{ m }{%
  \mbox{\raisebox{0.3ex}{\textscale{0.5}{\mc{#1}}}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\mc}
%    \begin{macrocode}
\ProvideDocumentCommand{\mc}{ m }{%
  \text{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationsymbol}
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationsymbol}{ }{%
  R%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotation}
% \cmd{\rotation} $\rotation$.\\
% \cmd{\rotation}\oarg{sup} $\rotation[sup]$.\\
% \cmd{\rotation}\oarg{sup}\oarg{sub} $\rotation[sup][sub]$.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\rotation}{ o O{} }{%
  \matr[#1][#2]{\rotationsymbol}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotrotation}
% \cmd{\dotrotation} $\dotrotation$.\\
% \cmd{\dotrotation}\oarg{sup} $\dotrotation[sup]$.\\
% \cmd{\dotrotation}\oarg{sup}\oarg{sub} $\dotrotation[sup][sub]$.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\dotrotation}{ o O{} }{%
  \dotmatr[#1][#2]{\rotationsymbol}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotrotation}
% \cmd{\ddotrotation} $\ddotrotation$.\\
% \cmd{\ddotrotation}\oarg{sup} $\ddotrotation[sup]$.\\
% \cmd{\ddotrotation}\oarg{sup}\oarg{sub} $\ddotrotation[sup][sub]$.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotrotation}{ o O{} }{%
  \ddotmatr[#1][#2]{\rotationsymbol}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ndotrotation}
% \cmd{\ndotrotation}\marg{num} $\ndotrotation{n}$.\\
% \cmd{\ndotrotation}\oarg{sup}\marg{num} $\ndotrotation[sup]{n}$.\\
% \cmd{\ndotrotation}\oarg{sup}\oarg{sub}\marg{num} $\ndotrotation[sup][sub]{n}$.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\ndotrotation}{ o O{} m }{%
  \ndotmatr[#1][#2]{#3}{\rotationsymbol}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationx}
% \cmd{\rotationx} provides the rotation matrix about the $x$ axis.\\
% \cmd{\rotationx}\oarg{sup} preprends superscript \oarg{sup}.\\
% \cmd{\rotationx}\oarg{sup}\oarg{sub} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationx}{ o O{} }{%
  \rotation[#1][#2]_{\ms{x}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationX}
% \cmd{\rotationX} provides the rotation matrix about the $X$ axis.\\
% \cmd{\rotationX}\oarg{sup} preprends superscript \oarg{sup}.\\
% \cmd{\rotationX}\oarg{sup}\oarg{sub} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationX}{ o O{} }{%
  \rotation[#1][#2]_{\ms{X}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationy}
% \cmd{\rotationy} provides the rotation matrix about the $y$ axis.\\
% \cmd{\rotationy}\oarg{sup} preprends superscript \oarg{sup}.\\
% \cmd{\rotationy}\oarg{sup}\oarg{sub} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationy}{ o O{} }{%
  \rotation[#1][#2]_{\ms{y}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationY}
% \cmd{\rotationY} provides the rotation matrix about the $Y$ axis.\\
% \cmd{\rotationY}\oarg{sup} preprends superscript \oarg{sup}.\\
% \cmd{\rotationY}\oarg{sup}\oarg{sub} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationY}{ o O{} }{%
  \rotation[#1][#2]_{\ms{Y}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationz}
% \cmd{\rotationz} provides the rotation matrix about the $z$ axis.\\
% \cmd{\rotationz}\oarg{sup} preprends superscript \oarg{sup}.\\
% \cmd{\rotationz}\oarg{sup}\oarg{sub} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationz}{ o O{} }{%
  \rotation[#1][#2]_{\ms{z}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationZ}
% \cmd{\rotationZ} provides the rotation matrix about the $Z$ axis.\\
% \cmd{\rotationZ}\oarg{sup} preprends superscript \oarg{sup}.\\
% \cmd{\rotationZ}\oarg{sup}\oarg{sub} also prepends subscript \oarg{sub}.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationZ}{ o O{} }{%
  \rotation[#1][#2]_{\ms{Z}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\imgu}
% \cmd{\imgu} imaginary unit.
%    \begin{macrocode}
\ProvideDocumentCommand{\imgu}{ }{%
  {\imagu\mkern1mu}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vertbar}
%    \begin{macrocode}
\ProvideDocumentCommand{\vertbar}{ }{%
  \rule[-1ex]{0.5pt}{2.5ex}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\horzbar}
%    \begin{macrocode}
\ProvideDocumentCommand{\horzbar}{ }{%
  \rule[.5ex]{2.5ex}{0.5pt}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\so}
% \cmd{so}\marg{num} algebra on $\SO{\cdot}$.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\so}{ m }{%
  \mathfrak{so}\of{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SO}
% \cmd{\SO}\marg{num} special Orthogonality group.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\SO}{ m }{%
  \mathrm{SO}\of{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\se}
% \cmd{se}\marg{num} algebra on $\se{\cdot}$.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\se}{ m }{%
  \mathfrak{se}\of{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SE}
% \cmd{\SE}\marg{num} special Euclidean group $\SE{\cdot}$.\\
%    \begin{macrocode}
\ProvideDocumentCommand{\SE}{ m }{%
  \mathrm{SE}\of{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\bigo}
%    \begin{macrocode}
\ProvideDocumentCommand{\bigo}{ }{%
  \mathcal{O}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\diag}
% \cmd{\diag} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\diag}{diag}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sign}
% \cmd{\sign} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\sign}{sign}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arctantwo}
% \cmd{\arctantwo} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arctantwo}{atan2}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\imagu}
% \cmd{\imagu} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\imagu}{\mathrm{i}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\trace}
% \cmd{\trace} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\trace}{tr}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arcsec}
% \cmd{\arcsec} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arcsec}{arcsec}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccot}
% \cmd{\arccot} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arccot}{arccot}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccsc}
% \cmd{\arccsc} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arccsc}{arccsc}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sech}
% \cmd{\sech} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\sech}{sech}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\csch}
% \cmd{\csch} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\csch}{csch}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arcsinh}
% \cmd{\arcsinh} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arcsinh}{arcsinh}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccosh}
% \cmd{\arccosh} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arccosh}{arccosh}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arctanh}
% \cmd{\arctanh} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arctanh}{arctanh}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arcsech}
% \cmd{\arcsech} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arcsech}{arcsech}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccsch}
% \cmd{\arccsch} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\arccsch}{arccsch}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccoth}
%    \begin{macrocode}
\ProvideMathOperator{\arccoth}{arccoth}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\adj}
% \cmd{\adj} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\adj}{adj}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rank}
% \cmd{\rank} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\rank}{rank}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\blkdiag}
% \cmd{\blkdiag} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\blkdiag}{blockdiag}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vertcat}
% \cmd{\vertcat} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\vertcat}{vertcat}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\horzcat}
% \cmd{\horzcat} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\horzcat}{horzcat}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\jacobiansymbol}
% \cmd{\jacobiansymbol} provides the corresponding math operator.
%    \begin{macrocode}
\ProvideMathOperator{\jacobiansymbol}{\philipptempel@bm{D}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\argmin}
% \cmd{\argmin} argument satisfying the minimization problem.
%    \begin{macrocode}
\ProvideMathOperator*{\argmin}{\arg\min}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\argmax}
% \cmd{\argmax} argument satisfying the maximization problem.
%    \begin{macrocode}
\ProvideMathOperator*{\argmax}{\arg\max}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SIinterval}
%    \begin{macrocode}
\ProvideDocumentCommand{\SIinterval}{ O{} m m m }{%
  \interval[#1]{#2}{#3}\,\si{#4}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SIset}
%    \begin{macrocode}
\ProvideDocumentCommand{\SIset}{ O{} m m }{%
  \SIlist[%
      open-bracket={\lbrace},%
      close-bracket={\rbrace},%
      list-separator={,},%
      list-pair-separator={,},%
      list-final-separator={,},%
      #1,%
    ]{#2}{#3}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SIsetlist}
%    \begin{macrocode}
\ProvideDocumentCommand{\SIsetlist}{ O{} m m }{%
  \SIlist[%
      open-bracket={\lbrace},%
      close-bracket={\rbrace},%
      list-separator={,},%
      list-pair-separator={,\dots,},%
      list-final-separator={,\dots,},%
      #1,%
    ]{#2}{#3}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\numset}
%    \begin{macrocode}
\ProvideDocumentCommand{\numset}{ s O{} m }{%
  \def\nl{%
    \numlist[%
      open-bracket={\lbrace},%
      close-bracket={\rbrace},%
      list-separator={,},%
      list-pair-separator={,},%
      list-final-separator={,},%
      #2,%
    ]{#3}%
  }%
  \IfBooleanTF{#1}{%
    \left\{%
      \nl%
    \right\}
  }{%
    \{%
      \nl%
    \}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\numsetlist}
%    \begin{macrocode}
\ProvideDocumentCommand{\numsetlist}{ s O{} m }{%
  \def\nl{%
    \numlist[%
      open-bracket={\lbrace},%
      close-bracket={\rbrace},%
      list-separator={\, ,},%
      list-pair-separator={\, , \dotsc ,},%
      list-final-separator={\, , \dotsc ,},%
      #2,%
    ]{#3}%
  }%
  \IfBooleanTF{#1}{%
    \left\{%
      \nl%
    \right\}
  }{%
    \{%
      \nl%
    \}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\estimate}
%    \begin{macrocode}
\ProvideDocumentCommand{\estimate}{ m }{%
  {#1}^{\ast}%
}%
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\endinput
%    \end{macrocode}
%</package>
%\Finale
